package br.com.caelum.vraptor.panettone;

import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.servlet.ServletContext;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import br.com.caelum.vraptor.environment.Environment;

/**
  * Defaults to always reload.
  */
public class PanettoneLoader {

	private static final Logger LOGGER= LoggerFactory.getLogger(PanettoneLoader.class);
	public final static String PANETTONE_DYNAMIC_LOADING = "br.com.caelum.vraptor.panettone.dynamic_loading";

	@Inject
	private Environment env;
	
	@Inject
	private ServletContext context;
	
	private ClassLoader loader;

	private URL basePath;

	public <T> Implementation load(Class<T> type) {
		if(shouldReload()) {
			createClassLoader();
		}
		return cachedLoad(type.getName());
	}
	
	@PostConstruct
	private void createClassLoader() {
		try {
			this.basePath = context.getResource("/WEB-INF/views");
			URL[] urls = { basePath };
			this.loader = new URLClassLoader(urls, getClass().getClassLoader());
		} catch (MalformedURLException e) {
			throw new RuntimeException("Unable to create template loader", e);
		} finally {
			LOGGER.info("panettone classloader created");
		}
	}

	public Implementation cachedLoad(String type) {
		String name = type + "Implementation";
		try {
			return new Implementation((Class<?>) loader.loadClass(name));
		} catch (ClassNotFoundException e) {
			throw new RuntimeException("Unable to load template " + name + " at " + basePath, e);
		}
	}
	
	private boolean shouldReload() {
		return !env.has(PANETTONE_DYNAMIC_LOADING) || Boolean.valueOf(env.get(PANETTONE_DYNAMIC_LOADING));
	}
}